#!/bin/bash

####################################################################################################
#### author: SimpleStack ###########################################################################
#### link: https://localhostdomain #################################################################
#### mirror: https://simplestack.git.supercluster.io/ss-install.txt ################################
#### path: /var/www/ss-install #####################################################################
#### destination: n/a (not a boilerplate) ##########################################################
#### purpose: Reinstalls the entire SimpleStack server and all LEMP modules, etc (idempotent) ######
#### module version: Ubuntu 20.04 LTS ##############################################################
####################################################################################################

## SS-CONFIG MUST BE PROPERLY CONFIGURED (AND CURRENT) BEFORE RUNNING SS-INSTALL ##
## ENSURE SS-CONFIG OPTIONS REMAIN CURRENT BY RUNNING SS-UPDATE OCCASIONALLY ##

## include SimpleStack configuration ##
source /var/www/ss-config

####################################################################################################
#### SimpleStack: Critical Bash Functions (Aliases) For This Script To Work ########################
####################################################################################################

## apt alias flags ##
function apt {
    export DEBIAN_FRONTEND=noninteractive
    export DEBIAN_PRIORITY=critical
    export PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
    command /usr/bin/apt -q -y -o Dpkg::Options::=--force-confold -o Dpkg::Options::=--force-confdef "$@"
}

## add-apt-repository alias flags ##
function add-apt-repository {
    export DEBIAN_FRONTEND=noninteractive
    export DEBIAN_PRIORITY=critical
    export PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
    command /usr/bin/add-apt-repository -y "$@"
}

## mysql alias flags ##
function mysql {
    export MYSQL_PWD=$DB_PASSWORD_ROOT
    command mysql --user=root --database="$DB_NAME" --host="$DB_HOST" --protocol=tcp --port=3306 --force "$@"
}

## wget alias flags ##
function wget {
    command wget --no-check-certificate --no-cache --no-cookies --tries=3 --timeout=15 "$@"
}

## cp alias flags ##
function cp {
    command cp -R -f -d --no-preserve=mode,ownership "$@"
}

## rsync alias flags ##
function rsync {
    command rsync -aI --ignore-errors "$@"
}

## unzip alias flags ##
function unzip {
    command unzip -o "$@"
}

## rm alias flags ##
function rm {
    command rm -R -f "$@"
}

## mkdir alias flags ##
function mkdir {
    command mkdir -p "$@"
}

## ln alias flags ##
function ln {
    command ln -s -f "$@"
}

####################################################################################################
#### SS-Install: Check OS Compability + Verify SS-Config Freshness + Backup Database ###############
####################################################################################################

## NEVER RUN SS-INSTALL UNLESS BUILD VERSION BELOW MATCHES CURRENT SS-CONFIG BOILERPLATE ##
## IN CASE OF EMERGENCY CONFLICTS THE SLICKSTACK TEAM MIGHT MISMATCH SAID BUILDS ##

## ensure correct Ubuntu version is installed ##
UBUNTU_VERSION=`lsb_release -rs`
if [[ "${UBUNTU_VERSION}" != "20.04" ]]; then
    echo -e "\e[93mSimpleStack is designed for Ubuntu 20.04, but this server is running Ubuntu ${UBUNTU_VERSION}.\e[0m" >&2
    exit 1
fi

## ensure ss-config build version matches ss-install build version ##
if [[ "$SS_BUILD" != "JULY2020A" ]]; then 
    echo -e "\e[93mYour ss-config file is outdated. Please update it by running ss-update and then run ss-install again.\e[0m" >&2
    exit 1
fi

## ensure enough disk space exists before proceeding ##
# COMING SOON

## backup database before proceeding ##
source /var/www/ss-dump

####################################################################################################
#### SS-Install: Configure Ubuntu (SimpleStack) Users + Set Various System Defaults #################
####################################################################################################

## MESSAGE ##
echo -e "\e[36mConfiguring users, permissions and Ubuntu defaults...\e[0m"

## set root password ##
echo root:$ROOT_PASSWORD | /usr/sbin/chpasswd

## ensure root password never expires ##
chage -E -1 -m 0 -M -1 -I -1 -W 99999 root

## create sudo user ##
adduser --disabled-password --gecos "" $SUDO_USER
echo $SUDO_USER:$SUDO_PASSWORD | /usr/sbin/chpasswd

## create sftp user ##
adduser --disabled-password --gecos "" $SFTP_USER
echo $SFTP_USER:$SFTP_PASSWORD | /usr/sbin/chpasswd

## set default editor to nano ##
update-alternatives --set editor /bin/nano

## set timezone ##
if [[ -z "$SS_TIMEZONE" ]]; then 
    timedatectl set-timezone UTC
else 
    timedatectl set-timezone $SS_TIMEZONE
fi

####################################################################################################
#### SS-Install: Download Latest SimpleStack Core Scripts + Cron Jobs (Via SS-Check) ###############
####################################################################################################

## MESSAGE ##
echo -e "\e[36mRetrieving latest SimpleStack files and copying them to local server...\e[0m"

## download latest versions ##
wget -O /tmp/ss-check https://simplestack.git.supercluster.io/ss-check.txt

## copy files to their destinations ##
cp /tmp/ss-check /var/www/ss-check

## reset permissions ##
chown root:root /var/www/ss-check
chmod 6770 /var/www/ss-check

## run scripts ##
source /var/www/ss-check

####################################################################################################
#### SS-Install: Configure Ubuntu Root + Sudo User Permissions (Sudoers File) ######################
####################################################################################################

## MESSAGE ##
echo -e "\e[36mConfiguring the Sudoers file (root and sudo users)...\e[0m"

## download latest versions ##
wget -O /tmp/sudoers https://simplestack.git.supercluster.io/ubuntu/sudoers.txt

## replace variables ##
sed -i "s/@SUDO_USER/${SUDO_USER}/g" /tmp/sudoers

## copy files to their destinations ##
cp /tmp/sudoers /etc/sudoers

## reset permissions ##
chown root:root /etc/sudoers
chmod 0440 /etc/sudoers

####################################################################################################
#### Configure Ubuntu: SSH + SFTP Settings (a.k.a. SSHD Configuration) #############################
####################################################################################################

## MESSAGE ##
echo -e "\e[36mConfiguring SSH (SFTP) settings, user permissions, and port number...\e[0m"

## download latest versions ##
wget -O /tmp/sshd_config https://simplestack.git.supercluster.io/ubuntu/sshd-config.txt

## replace variables ##
sed -i "s/@SUDO_USER/${SUDO_USER}/g" /tmp/sshd_config
sed -i "s/@SFTP_USER/${SFTP_USER}/g" /tmp/sshd_config

## set SSH port number (optional) ##
if [[ -z "$SSH_PORT" ]]; then 
    sed -i "s/@SSH_PORT/6969/g" /tmp/sshd_config
else 
    sed -i "s/@SSH_PORT/${SSH_PORT}/g" /tmp/sshd_config
fi

## enable/disable password authentication (depending on if SSH_KEYS is enabled) ##
if [[ "$SSH_KEYS" == "true" ]]; then 
    sed -i "s/@SSH_PASSWORD_AUTHENTICATION/no/g" /tmp/sshd_config
else 
    sed -i "s/@SSH_PASSWORD_AUTHENTICATION/yes/g" /tmp/sshd_config
fi

## enable/disable public key authentication (depending on if SSH_KEYS is enabled) ##
if [[ "$SSH_KEYS" == "true" ]]; then 
    sed -i "s/@SSH_PUBKEY_AUTHENTICATION/yes/g" /tmp/sshd_config
else 
    sed -i "s/@SSH_PUBKEY_AUTHENTICATION/no/g" /tmp/sshd_config
fi

## allow IPv6 SSH sessions (any) if no IPv4 address is detected on the server ##
# if [[ CURRENT IP ADDRESS IS IPV6 ONLY ]]; then 
#    sed -i "s/AddressFamily inet/AddressFamily any/g" /tmp/sshd_config
# fi
## Ref: https://stackoverflow.com/questions/5281341/get-local-network-interface-addresses-using-only-proc
## Ref: https://stackoverflow.com/questions/39983121/how-to-detect-if-system-has-ipv6-enabled-in-a-unix-shell-script
## Ref: https://www.cyberciti.biz/faq/bash-shell-command-to-find-get-ip-address/

## copy files to their destinations ##
cp /tmp/sshd_config /etc/ssh/sshd_config

## reset permissions ##
chown root:root /etc/ssh/sshd_config
chmod 0440 /etc/ssh/sshd_config

mkdir /var/www/meta/.ssh
chown $SUDO_USER:$SUDO_USER /var/www/meta/.ssh
chmod 0755 /var/www/meta/.ssh ## should be 0775 as per Ubuntu docs

touch /var/www/meta/.ssh/authorized_keys
chown $SUDO_USER:$SUDO_USER /var/www/meta/.ssh/authorized_keys
chmod 0664 /var/www/meta/.ssh/authorized_keys ## should be 0664 as per Ubuntu docs

## restart services ##
/etc/init.d/ssh restart

####################################################################################################
#### SS-Install: Install SimpleStack (Ubuntu) Root Crontab File ####################################
####################################################################################################

## MESSAGE ##
echo -e "\e[36mInstalling the SimpleStack crontab file to Ubuntu root user crontab...\e[0m"

## install crontab ##
crontab /var/www/0-crontab

## reset permissions ##
chown root:root /var/spool/cron/crontabs/root
chmod 0600 /var/spool/cron/crontabs/root

## reload crontab ##
/etc/init.d/cron reload

####################################################################################################
#### SimpleStack: Set Dpkg Basic Settings + Update Apt (Package) Cache #############################
####################################################################################################

## MESSAGE ##
echo -e "\e[36mSet dpkg to noneractive and force confold and update apt cache...\e[0m"

## set confold as dpkg default (fail-safe in case apt upgrade called directly) ##
DEBIAN_FRONTEND=noninteractive dpkg --configure -a --force-confold

## update repo cache ##
apt update

####################################################################################################
#### SimpleStack Install Various Modules Via Default Ubuntu Packages ###############################
####################################################################################################

## MESSAGE ##
echo -e "\e[36mInstalling various SimpleStack modules from most recent Ubuntu repos...\e[0m"

## upgrade installed Ubuntu packages (LEMP modules) + Linux kernel (apt feature) ##
apt full-upgrade

## install update-manager-core ##
apt install update-manager-core

## install Linux utilities (Zip, Unzip, DOS2Unix) ##
apt install zip unzip dos2unix

## install Git ##
apt install git

## install ClamAV ##
apt install clamav

####################################################################################################
#### Install Cerbot (Let's Encrypt) Packages Via PPA Repos #########################################
####################################################################################################

## install software-properties-common (for Certbot) ##
# apt install software-properties-common

## add custom PPAs (for Certbot) ##
# add-apt-repository universe
# add-apt-repository ppa:certbot/certbot ## Ubuntu 20.04 now includes Certbot

## update again after adding custom ppas ##
# apt update

apt remove certbot 
add-apt-repository --remove ppa:certbot/certbot

## install Certbot ##
apt install certbot python3-certbot-nginx

####################################################################################################
#### SS-Install: Install PHP-FPM 7.4.x + Required PHP Extensions ###################################
####################################################################################################

## run ss-install-php ##
source /var/www/ss-install-php

####################################################################################################
### Prepare WP-CLI Configuration (Installation Completed Via Bash Aliases) #########################
####################################################################################################

## MESSAGE: explain repos ##
echo -e "\e[36mInstalling the WP-CLI module directly from SimpleStack mirrors...\e[0m"

## uninstall current wp-cli versions ##
rm /usr/local/bin/wp
rm /home/wp-completion.bash
rm /home/${SUDO_USER}/wp-cli.yml
rm /var/www/meta/.wp-completion*
rm /var/www/meta/wp-cli.yml
rm /var/www/html/.wp-cli
rm /var/www/html/wp-cli
sed -i '/WP-CLI/d' /home/${SUDO_USER}/.bashrc
sed -i '/wp-completion/d' /home/${SUDO_USER}/.bashrc

## symlinks for wp-cli.yml ##
ln /home/${SUDO_USER}/.wp-cli/config.yml /var/www/meta/wp-cli.yml &> /dev/null
ln /root/.wp-cli/config.yml /var/www/meta/wp-cli.yml &> /dev/null

## download latest versions ##
wget -O /tmp/wp-cli.phar https://simplestack.git.supercluster.io/wp-cli/wp-cli.phar
wget -O /tmp/wp-cli.yml https://simplestack.git.supercluster.io/wp-cli/wp-cli-yml.txt
wget -O /tmp/wp-completion.txt https://simplestack.git.supercluster.io/wp-cli/wp-completion.txt

## make files executable ##
chmod +x /tmp/wp-cli.phar

## copy files to destinations ##
cp /tmp/wp-cli.phar /usr/local/bin/wp
cp /tmp/wp-cli.yml /var/www/meta/wp-cli.yml
cp /tmp/wp-completion.txt /var/www/meta/.wp-completion

## reset permissions ##
## Ref: https://www.alexgeorgiou.gr/wp-cli-www-data-user-permissions-linux/
chown root:root /usr/local/bin/
chown www-data:www-data /usr/local/bin/wp
chown www-data:www-data /var/www/meta/wp-cli.yml
chown www-data:www-data /var/www/meta/.wp-completion
chown root:root /home/${SUDO_USER}/.wp-cli/config.yml
chown root:root /root/.wp-cli/config.yml
chmod 6775 /usr/local/bin/wp
chmod 6775 /var/www/meta/wp-cli.yml
chmod 6775 /var/www/meta/.wp-completion

####################################################################################################
### Install Bash Aliases (Supports Basic SimpleStack Commands) + Finalize WP-CLI ###################
####################################################################################################

## MESSAGE: explain repos ##
echo -e "\e[36mInstalling Bash aliases for basic SimpleStack commands...\e[0m"

## uninstall old ##
rm /home/${SUDO_USER}/.bash-aliases
rm /var/www/meta/.bash-aliases
sed -i '/include Bash aliases/d' /home/${SUDO_USER}/.bashrc
sed -i '\:var/www/meta:d' /home/${SUDO_USER}/.bashrc

## download ##
wget -O /tmp/bash-aliases.txt https://simplestack.git.supercluster.io/ubuntu/bash-aliases.txt

## copy files ##
cp /tmp/bash-aliases.txt /var/www/meta/.bash-aliases

## reset permissions ##
chown root:root /var/www/meta/.bash-aliases
chmod 6775 /var/www/meta/.bash-aliases

## modify .bashrc file ##
echo '
## include Bash aliases ##
source /var/www/meta/.bash-aliases' >> /home/${SUDO_USER}/.bashrc

## reload .bashrc ##
source /home/${SUDO_USER}/.bashrc

####################################################################################################
#### SimpleStack: Install Nginx Server + FastCGI Cache + OpenSSL ###################################
####################################################################################################

## run ss-install-nginx ##
source /var/www/ss-install-nginx

####################################################################################################
#### SS-Install: Install OpenSSL + Certbot (Let's Encrypt) Free SSL Certificates ###################
####################################################################################################

## run ss-encrypt ##
source /var/www/ss-encrypt

####################################################################################################
#### SS-Install: Install MySQL 8.0.x (Single Database Only) ########################################
####################################################################################################

## TEMP DISABLED DUE TO ISSUES WITH INSTALL ... MANUALLY INSTALL MYSQL INSTEAD ##

## run ss-install-mysql ##
# source /var/www/ss-install-mysql

####################################################################################################
#### SimpleStack: Install WordPress CMS (Download + Unzip WordPress Archive) #######################
####################################################################################################

## cleanup files ##
rm /tmp/wordpress.zip*
rm /var/www/html/wordpress*
rm /var/www/html/staging/wordpress*

## make dirs ##
mkdir /var/www/html
mkdir /var/www/html/staging

## brief permissions reset ##
chown -R $SFTP_USER:wordpress /var/www/html
chown -R $SFTP_USER:wordpress /var/www/html/staging
chmod 6775 /var/www/html
chmod 6775 /var/www/html/staging

## download latest (patched) WordPress version ##
wget -O /tmp/wordpress.zip https://simplestack.git.supercluster.io/wordpress/wordpress.zip

## install WordPress to web directory ##
cp /tmp/wordpress.zip /var/www/html
unzip /var/www/html/wordpress.zip -d /var/www/html
chown -R www-data:wordpress /var/www/html/wordpress
chmod 775 /var/www/html/wordpress
rsync /var/www/html/wordpress/* /var/www/html

## install WordPress to staging subdirectory ##
cp /tmp/wordpress.zip /var/www/html/staging
unzip /var/www/html/staging/wordpress.zip -d /var/www/html/staging
chown -R www-data:wordpress /var/www/html/staging/wordpress
chmod 775 /var/www/html/staging/wordpress
rsync /var/www/html/staging/wordpress/* /var/www/html/staging

## cleanup files ##
rm /tmp/wordpress.zip* &> /dev/null
rm /var/www/html/wordpress* &> /dev/null
rm /var/www/html/staging/wordpress* &> /dev/null
rm /var/www/html/classicpress* &> /dev/null
rm /var/www/html/staging/classicpress* &> /dev/null
rm /var/www/html/wp-content/plugins/hello.php &> /dev/null
rm /var/www/html/staging/wp-content/plugins/hello.php &> /dev/null

####################################################################################################
#### SimpleStack: Install + Configure Throwaway Theme ##############################################
####################################################################################################

## cleanup files ##
rm /tmp/throwaway*

## retrieve latest throwaway theme ##
wget -O /tmp/throwaway.zip https://simplestack.git.supercluster.io/wordpress/throwaway.zip

## unzip ##
unzip -d /tmp/throwaway/ -o -j /tmp/throwaway.zip

## replace placeholders with ss-config variables ##
sed -i "s/@SITE_EMAIL/${SITE_EMAIL}/g" /tmp/throwaway/functions.php
sed -i "s/@SITE_NAME/${SITE_NAME}/g" /tmp/throwaway/functions.php
sed -i "s/@SITE_DOMAIN/${SITE_DOMAIN}/g" /tmp/throwaway/functions.php
sed -i "s/@WP_LANG/${WP_LANG}/g" /tmp/throwaway/functions.php

## copy files to destinations ##
cp /tmp/throwaway /var/www/html/wp-content/themes/

## cleanup files ##
rm /tmp/throwaway*

####################################################################################################
#### SimpleStack: Modify Database Options For WordPress ############################################
####################################################################################################

## ensure home option is correct in WordPress database ##
mysql --execute="UPDATE ${DB_PREFIX}options SET option_value='https://$SITE_DOMAIN' WHERE option_name='home'";

## ensure siteurl option is correct in WordPress database ##
mysql --execute="UPDATE ${DB_PREFIX}options SET option_value='https://$SITE_DOMAIN' WHERE option_name='siteurl'";

####################################################################################################
#### SimpleStack: Configure WP-Config File (Production) ############################################
####################################################################################################

## delete tmp files ##
rm /tmp/wp-config*

## retrieve latest wp-config boilerplate ##
wget -O /tmp/wp-config.txt https://simplestack.git.supercluster.io/wordpress/wp-config.txt

###### WP Multisite settings ########

## set multisite subdomains ##
if [[ -z "$WP_MULTISITE_SUBDOMAINS" ]]; then 
    sed -i "s/@WP_MULTISITE_SUBDOMAINS/true/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_MULTISITE_SUBDOMAINS/${WP_MULTISITE_SUBDOMAINS}/g" /tmp/wp-config.txt
fi

## set multisite ##
if [[ -z "$WP_MULTISITE" ]]; then 
    sed -i "s/@WP_MULTISITE/false/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_MULTISITE/${WP_MULTISITE}/g" /tmp/wp-config.txt
fi


####### other WP Config settings ##########

## replace database placeholders ##
sed -i "s/@DB_NAME/${DB_NAME}/g" /tmp/wp-config.txt
sed -i "s/@DB_USER/${DB_USER}/g" /tmp/wp-config.txt
sed -i "s/@DB_PASSWORD/${DB_PASSWORD}/g" /tmp/wp-config.txt
sed -i "s/@DB_HOST/${DB_HOST}/g" /tmp/wp-config.txt
sed -i "s/@DB_CHARSET/${DB_CHARSET}/g" /tmp/wp-config.txt
sed -i "s/@DB_COLLATE/${DB_COLLATE}/g" /tmp/wp-config.txt
sed -i "s/@DB_PREFIX/${DB_PREFIX}/g" /tmp/wp-config.txt

## set object cache (optional) ##
if [[ -z "$OBJECT_CACHE" ]]; then 
    sed -i "s/@OBJECT_CACHE/true/g" /tmp/wp-config.txt
else 
    sed -i "s/@OBJECT_CACHE/${OBJECT_CACHE}/g" /tmp/wp-config.txt
fi

## set object cache (optional) ##
if [[ -z "$WP_LANG" ]]; then 
    sed -i "s/@WP_LANG/en-US/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_LANG/${WP_LANG}/g" /tmp/wp-config.txt
fi

## replace domain placeholders ##
sed -i "s/@SITE_DOMAIN/${SITE_DOMAIN}/g" /tmp/wp-config.txt
sed -i "s/@SITE_TLD/${SITE_TLD}/g" /tmp/wp-config.txt

## replace SFTP Details placeholders ##
sed -i "s/@SFTP_USER/${SFTP_USER}/g" /tmp/wp-config.txt
sed -i "s/@SFTP_PASSWORD/${SFTP_PASSWORD}/g" /tmp/wp-config.txt
if [[ -z "$SSH_PORT" ]]; then 
    sed -i "s/@SSH_PORT/6969/g" /tmp/wp-config.txt
else 
    sed -i "s/@SSH_PORT/${SSH_PORT}/g" /tmp/wp-config.txt
fi

## replace CloudFlare placeholders ##
sed -i "s/@CLOUDFLARE_API_KEY/${CLOUDFLARE_API_KEY}/g" /tmp/wp-config.txt
sed -i "s/@CLOUDFLARE_API_EMAIL/${CLOUDFLARE_API_EMAIL}/g" /tmp/wp-config.txt

## CloudFlare DNS widget ##
if [[ -z "$CLOUDFLARE_WIDGET_DNS" ]]; then 
    sed -i "s/@CLOUDFLARE_WIDGET_DNS/true/g" /tmp/wp-config.txt
else 
    sed -i "s/@CLOUDFLARE_WIDGET_DNS/${CLOUDFLARE_WIDGET_DNS}/g" /tmp/wp-config.txt
fi

## replace salt keys ##
sed -i "s/@AUTHKEY/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@SECUREAUTHKEY/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@LOGGEDINKEY/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@NONCEKEY/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@AUTHSALT/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@SECUREAUTHSALT/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@LOGGEDINSALT/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@NONCESALT/$(openssl rand -hex 48)/g" /tmp/wp-config.txt

## Replace Placeholders: Debug and Dev/staging server ##
if [[ "$SS_TYPE" != "production" ]]; then 
    sed -i "s/@WP_DEBUG/true/g" /tmp/wp-config.txt
    sed -i "s/@WP_LOCAL_DEV/true/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_DEBUG/false/g" /tmp/wp-config.txt
    sed -i "s/@WP_LOCAL_DEV/false/g" /tmp/wp-config.txt
fi

## multisite ##
if [[ "$WP_MULTISITE" == "true" ]]; then 
    sed -i "s/@WP_MULTISITE/true/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_MULTISITE/false/g" /tmp/wp-config.txt
fi

## core auto updates ##
if [[ -z "$WP_AUTO_UPDATE_CORE" ]]; then 
    sed -i "s/@WP_AUTO_UPDATE_CORE/minor/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_AUTO_UPDATE_CORE/${WP_AUTO_UPDATE_CORE}/g" /tmp/wp-config.txt
fi

## autosave (drafts) ##
if [[ -z "$WP_AUTOSAVE_INTERVAL" ]]; then 
    sed -i "s/@WP_AUTOSAVE_INTERVAL/60/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_AUTOSAVE_INTERVAL/${WP_AUTOSAVE_INTERVAL}/g" /tmp/wp-config.txt
fi

## revisions ##
if [[ -z "$WP_POST_REVISIONS" ]]; then 
    sed -i "s/@WP_POST_REVISIONS/5/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_POST_REVISIONS/${WP_POST_REVISIONS}/g" /tmp/wp-config.txt
fi

## block external requests ##
if [[ -z "$WP_HTTP_BLOCK_EXTERNAL" ]]; then 
    sed -i "s/@WP_HTTP_BLOCK_EXTERNAL/false/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_HTTP_BLOCK_EXTERNAL/${WP_HTTP_BLOCK_EXTERNAL}/g" /tmp/wp-config.txt
fi

## allowed hosts ##
if [[ -z "$WP_ACCESSIBLE_HOSTS" ]]; then 
    sed -i "s/@WP_ACCESSIBLE_HOSTS/api.wordpress.org/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_ACCESSIBLE_HOSTS/${WP_ACCESSIBLE_HOSTS}/g" /tmp/wp-config.txt
fi

## file edits ##
if [[ -z "$WP_DISALLOW_FILE_EDIT" ]]; then 
    sed -i "s/@WP_DISALLOW_FILE_EDIT/false/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_DISALLOW_FILE_EDIT/${WP_DISALLOW_FILE_EDIT}/g" /tmp/wp-config.txt
fi

## file mods ##
if [[ -z "$WP_DISALLOW_FILE_MODS" ]]; then 
    sed -i "s/@WP_DISALLOW_FILE_MODS/false/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_DISALLOW_FILE_MODS/${WP_DISALLOW_FILE_MODS}/g" /tmp/wp-config.txt
fi

## file uploads ##
if [[ -z "$WP_ALLOW_UNFILTERED_UPLOADS" ]]; then 
    sed -i "s/@WP_ALLOW_UNFILTERED_UPLOADS/true/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_ALLOW_UNFILTERED_UPLOADS/${WP_ALLOW_UNFILTERED_UPLOADS}/g" /tmp/wp-config.txt
fi

## for fresh (virgin) WP installs enable certain items ##
if [ ! -f "/var/www/meta/.cherry" ]; then 
    sed -i "s#//VIRGIN//##g" /tmp/wp-config.txt
fi

## rename files ##
mv /tmp/wp-config.txt /tmp/wp-config.php

## copy files to destinations ##
cp /tmp/wp-config.php /var/www/html/wp-config.php

## delete tmp files ##
rm /tmp/wp-config*

## create directories if doesn't exist (will not overwrite) ##
mkdir /var/www/html/wp-content/temp
mkdir /var/www/html/wp-content/uploads
mkdir /var/www/html/wp-content/upgrade

## for fresh (virgin) WP installs delete some of the WP Core junk plugins and themes ##
if [ ! -f "/var/www/meta/.cherry" ]; then 
    rm /var/www/html/wp-content/plugins/akismet*
    # rm /var/www/html/wp-content/themes/twenty*
fi

####################################################################################################
#### SimpleStack: Configure WP-Config File (Staging) ###############################################
####################################################################################################

## delete tmp files ##
rm /tmp/wp-config*

## change dir ##
cd /var/www/html/staging

## retrieve latest wp-config boilerplate ##
wget -O /tmp/wp-config.txt https://simplestack.git.supercluster.io/wordpress/wp-config-staging.txt

###### WP Multisite settings ########

## set multisite subdomains ##
if [[ -z "$WP_MULTISITE_SUBDOMAINS" ]]; then 
    sed -i "s/@WP_MULTISITE_SUBDOMAINS/true/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_MULTISITE_SUBDOMAINS/${WP_MULTISITE_SUBDOMAINS}/g" /tmp/wp-config.txt
fi

## set multisite ##
if [[ -z "$WP_MULTISITE" ]]; then 
    sed -i "s/@WP_MULTISITE/false/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_MULTISITE/${WP_MULTISITE}/g" /tmp/wp-config.txt
fi

## multisite ##
if [[ "$WP_MULTISITE" == "true" ]]; then 
    sed -i "s/@WP_MULTISITE/true/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_MULTISITE/false/g" /tmp/wp-config.txt
fi


####### other WP Config settings ##########

## replace database placeholders ##
sed -i "s/@DB_NAME/${DB_NAME}/g" /tmp/wp-config.txt
sed -i "s/@DB_USER/${DB_USER}/g" /tmp/wp-config.txt
sed -i "s/@DB_PASSWORD/${DB_PASSWORD}/g" /tmp/wp-config.txt
sed -i "s/@DB_HOST/${DB_HOST}/g" /tmp/wp-config.txt
sed -i "s/@DB_CHARSET/${DB_CHARSET}/g" /tmp/wp-config.txt
sed -i "s/@DB_COLLATE/${DB_COLLATE}/g" /tmp/wp-config.txt
sed -i "s/@DB_PREFIX/staging_/g" /tmp/wp-config.txt

## disable object cache (staging) ##
sed -i "s/@OBJECT_CACHE/false/g" /tmp/wp-config.txt

## set language ##
if [[ -z "$WP_LANG" ]]; then 
    sed -i "s/@WP_LANG/en-US/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_LANG/${WP_LANG}/g" /tmp/wp-config.txt
fi

## replace domain placeholders ##
sed -i "s#@SITE_DOMAIN#${SITE_DOMAIN}#g" /tmp/wp-config.txt
sed -i "s/@SITE_TLD/${SITE_TLD}/g" /tmp/wp-config.txt

## replace SFTP Details placeholders ##
sed -i "s/@SFTP_USER/${SFTP_USER}/g" /tmp/wp-config.txt
sed -i "s/@SFTP_PASSWORD/${SFTP_PASSWORD}/g" /tmp/wp-config.txt
if [[ -z "$SSH_PORT" ]]; then 
    sed -i "s/@SSH_PORT/6969/g" /tmp/wp-config.txt
else 
    sed -i "s/@SSH_PORT/${SSH_PORT}/g" /tmp/wp-config.txt
fi

## replace CloudFlare placeholders ##
sed -i "s/@CLOUDFLARE_API_KEY/${CLOUDFLARE_API_KEY}/g" /tmp/wp-config.txt
sed -i "s/@CLOUDFLARE_API_EMAIL/${CLOUDFLARE_API_EMAIL}/g" /tmp/wp-config.txt

## CloudFlare DNS widget ##
if [[ -z "$CLOUDFLARE_WIDGET_DNS" ]]; then 
    sed -i "s/@CLOUDFLARE_WIDGET_DNS/true/g" /tmp/wp-config.txt
else 
    sed -i "s/@CLOUDFLARE_WIDGET_DNS/${CLOUDFLARE_WIDGET_DNS}/g" /tmp/wp-config.txt
fi

## replace salt keys ##
sed -i "s/@AUTHKEY/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@SECUREAUTHKEY/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@LOGGEDINKEY/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@NONCEKEY/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@AUTHSALT/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@SECUREAUTHSALT/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@LOGGEDINSALT/$(openssl rand -hex 48)/g" /tmp/wp-config.txt
sed -i "s/@NONCESALT/$(openssl rand -hex 48)/g" /tmp/wp-config.txt

## Replace Placeholders: Debug and Dev/staging server ##
sed -i "s/@WP_DEBUG/true/g" /tmp/wp-config.txt
sed -i "s/@WP_LOCAL_DEV/false/g" /tmp/wp-config.txt



## core auto updates ##
if [[ -z "$WP_AUTO_UPDATE_CORE" ]]; then 
    sed -i "s/@WP_AUTO_UPDATE_CORE/minor/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_AUTO_UPDATE_CORE/${WP_AUTO_UPDATE_CORE}/g" /tmp/wp-config.txt
fi

## autosave (drafts) ##
if [[ -z "$WP_AUTOSAVE_INTERVAL" ]]; then 
    sed -i "s/@WP_AUTOSAVE_INTERVAL/60/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_AUTOSAVE_INTERVAL/${WP_AUTOSAVE_INTERVAL}/g" /tmp/wp-config.txt
fi

## revisions ##
if [[ -z "$WP_POST_REVISIONS" ]]; then 
    sed -i "s/@WP_POST_REVISIONS/5/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_POST_REVISIONS/${WP_POST_REVISIONS}/g" /tmp/wp-config.txt
fi

## block external requests ##
if [[ -z "$WP_HTTP_BLOCK_EXTERNAL" ]]; then 
    sed -i "s/@WP_HTTP_BLOCK_EXTERNAL/false/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_HTTP_BLOCK_EXTERNAL/${WP_HTTP_BLOCK_EXTERNAL}/g" /tmp/wp-config.txt
fi

## allowed hosts ##
if [[ -z "$WP_ACCESSIBLE_HOSTS" ]]; then 
    sed -i "s/@WP_ACCESSIBLE_HOSTS/api.wordpress.org/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_ACCESSIBLE_HOSTS/${WP_ACCESSIBLE_HOSTS}/g" /tmp/wp-config.txt
fi

## file edits ##
sed -i "s/@WP_DISALLOW_FILE_EDIT/false/g" /tmp/wp-config.txt

## file mods ##
sed -i "s/@WP_DISALLOW_FILE_MODS/false/g" /tmp/wp-config.txt

## file uploads ##
if [[ -z "$WP_ALLOW_UNFILTERED_UPLOADS" ]]; then 
    sed -i "s/@WP_ALLOW_UNFILTERED_UPLOADS/true/g" /tmp/wp-config.txt
else 
    sed -i "s/@WP_ALLOW_UNFILTERED_UPLOADS/${WP_ALLOW_UNFILTERED_UPLOADS}/g" /tmp/wp-config.txt
fi

## rename files ##
mv /tmp/wp-config.txt /tmp/wp-config.php

## copy files to destinations ##
cp /tmp/wp-config.php /var/www/html/staging/wp-config.php

## delete tmp files ##
rm /tmp/wp-config*

## create directories if doesn't exist (will not overwrite) ##
mkdir /var/www/html/staging/wp-content/temp
mkdir /var/www/html/staging/wp-content/uploads
mkdir /var/www/html/staging/wp-content/upgrade

####################################################################################################
#### SimpleStack: Install Redis-Server (Includes Redis-CLI) + PHP-Redis ############################
####################################################################################################

## purge redis-server + php-redis (if installed) ##
apt purge redis-server
apt purge php-redis

## install redis-server + php-redis ##
apt install redis-server
apt install php-redis

## configure redis-server for object caching (only) ##
sed -i '/maxmemory.*bytes.*/c\maxmemory 256mb' /etc/redis/redis.conf
sed -i '/maxmemory-policy noeviction/c\maxmemory-policy allkeys-lru' /etc/redis/redis.conf
sed -i '/always-show-logo yes/c\always-show-logo no' /etc/redis/redis.conf
# sed -i '/logfile/c\logfile /var/www/logs/redis.log' /etc/redis/redis.conf
# sed -i '/dir /c\dir /tmp' /etc/redis/redis.conf

## create log files if do not exist ##
# if [ ! -f "/var/www/logs/redis.log" ]; then touch "/var/www/logs/redis.log"; fi
# mkdir /var/run/redis

## reset permissions ##
chown redis:redis /var/www/logs/redis.log
chown redis:redis /etc/redis/redis.conf
chown redis:redis /var/run/redis
chmod 6775 /var/www/logs/redis.log
chmod 775 /etc/redis/redis.conf
chmod 775 /var/run/redis

####################################################################################################
#### SS-Install: Install MU (Must-Use) Plugins (After PHP-FPM And Redis Installed) #################
####################################################################################################

## run ss-muplugs ##
source /var/www/ss-muplugs

####################################################################################################
#### SS-Install: Install Adminer (phpMyAdmin) ######################################################
####################################################################################################

## MESSAGE ##
echo -e "\e[36mInstalling Adminer script for SQL database management...\e[0m"

## download latest versions ##
wget -O /tmp/adminer.php https://simplestack.git.supercluster.io/adminer/adminer.txt

## copy files to their destinations ##
cp /tmp/adminer.php /var/www/meta/adminer.php

## reset permissions ##
chown -R www-data:www-data /var/www/tools/adminer
chmod 6775 /var/www/tools/adminer &> /dev/null
chmod 6664 /var/www/tools/adminer/adminer.php &> /dev/null

chmod 6664 /var/www/meta/adminer.php &> /dev/null

####################################################################################################
#### SS-Install: Configure UFW Firewall + Set UFW Rules ############################################
####################################################################################################

## delete tmp files ##
rm /tmp/ufw*
rm /tmp/user*

## install ufw ##
apt install ufw

## ufw rules ##
ufw default deny incoming
ufw default allow outgoing
ufw allow $SSH_PORT
ufw allow 80
ufw allow 443
ufw allow 6379
ufw --force disable
ufw --force enable
echo "y" | ufw enable

# retrieve latest versions ##
wget -O /tmp/ufw https://simplestack.git.supercluster.io/ufw-firewall/ufw.txt
wget -O /tmp/ufw.conf https://simplestack.git.supercluster.io/ufw-firewall/ufw-conf.txt
wget -O /tmp/user.rules https://simplestack.git.supercluster.io/ufw-firewall/user-rules.txt

if [[ -z "$SSH_PORT" ]]; then 
    sed -i "s/@SSH_PORT/6969/g" /tmp/user.rules
else 
    sed -i "s/@SSH_PORT/${SSH_PORT}/g" /tmp/user.rules
fi

## copy files to their destinations ##
cp /tmp/ufw /etc/default/ufw
cp /tmp/ufw.conf /etc/ufw/ufw.conf
cp /tmp/user.rules /etc/ufw/user.rules

## reset permissions ##
chown root:root /etc/default/ufw
chown root:root /etc/ufw/ufw.conf
chown root:root /etc/ufw/user.rules
chmod 0664 /etc/default/ufw
chmod 0664 /etc/ufw/ufw.conf
chmod 0664 /etc/ufw/user.rules

## delete tmp files ##
rm /tmp/ufw*
rm /tmp/user*

####################################################################################################
#### Configure ClamAV ##############################################################################
####################################################################################################

## update ClamAV malware cache ##
## NO LONGER NEEDED DURING INITIAL INSTALL (RUNS AUTOMATICALLY) ##
# freshclam

# sed -i '/UpdateLogFile/c\UpdateLogFile /var/www/logs/clamav.log' /etc/clamav/freshclam.conf
sed -i '/LogRotate/c\LogRotate true' /etc/clamav/freshclam.conf
sed -i '/Checks/c\Checks 2' /etc/clamav/freshclam.conf
sed -i '/MaxAttempts/c\MaxAttempts 3' /etc/clamav/freshclam.conf

####################################################################################################
#### Configure Ubuntu: Optimize The System Kernel ##################################################
####################################################################################################

## delete tmp files ##
rm /tmp/sysctl*

## backup current Ubunt kernel file ##
cp /etc/sysctl.conf /etc/sysctl.conf.bak

## download latest versions ##
wget -O /tmp/sysctl.conf https://simplestack.git.supercluster.io/ubuntu/sysctl.txt

## copy files to their destinations ##
cp /tmp/sysctl.conf /etc/sysctl.conf

## reset permissions ##
chown root:root /etc/sysctl.conf
chmod 0664 /etc/sysctl.conf

####################################################################################################
#### SimpleStack: Finish Up Installation + Confirmation Message ####################################
####################################################################################################

## not a virgin install anymore ##
mkdir /var/www/meta/ && touch /var/www/meta/.cherry

## run scripts ##
source /var/www/ss-purge
source /var/www/ss-perms

## reset all logs to NULL ##
cat /dev/null > /var/www/logs/clamav.log
cat /dev/null > /var/www/logs/error.log
cat /dev/null > /var/www/logs/mysql.log
cat /dev/null > /var/www/logs/nginx.log
cat /dev/null > /var/www/logs/redis.log

## restart services ##
source /var/www/ss-restart

## confirm installation complete ##
echo -e "\e[36mSimpleStack installation complete! Please reboot server and ensure CloudFlare is activated with Full SSL mode.\e[0m"

####################################################################################################
#### SimpleStack: External References Used To Improve This Script (Thanks, Interwebz) ##############
####################################################################################################

## Ref: http://wproller.com ##
## Ref: https://github.com/bjornjohansen/deploy-wp-on-vps/blob/master/deploy.sh ##
## Ref: https://github.com/sm0k3net/Useful-Scripts/blob/master/wordpress.sh ##
## Ref: https://github.com/techandme/wordpress-vm ##
## Ref: https://github.com/QROkes/webinoly ##
## Ref: https://github.com/WordOps/WordOps ##
## Ref: https://www.isicca.com/en/lemp-howto-install-nginx-php7-mariadb/ ##
## Ref: https://gist.github.com/FeChagas/54b0cdf354b197dc8e417357d7687e8b ##
## Ref: https://github.com/GeekPress/WP-Quick-Install ##
## Ref: https://github.com/bajpangosh/High-Traffic-wordpress-server-configuration ##
## Ref: https://gist.github.com/nickfox-taterli/2c283d73ba817392fb0f9f15d9cfa514 ##
## Ref: https://gist.github.com/beardedinbinary/79d7ad34f9980f0a4c23 ##
## Ref: https://www.linuxbabe.com/security/letsencrypt-webroot-tls-certificate
## Ref: https://stackoverflow.com/questions/49668542/create-a-script-that-adds-lines-of-code-to-bashrc-then-reloads-the-terminal
## Ref: https://peteris.rocks/blog/unattended-installation-of-wordpress-on-ubuntu-server/
## Ref: https://serverfault.com/questions/783527/non-interactive-silent-install-of-mysql-5-7-on-ubuntu-16-04-lts/830352#830352
## Ref: https://www.percona.com/blog/2016/10/18/upgrading-to-mysql-5-7-beware-of-the-new-strict-mode/
## Ref: https://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash
## Ref: https://serverfault.com/questions/773964/calculating-the-percentage-of-the-total-available-memory-on-linux-as-an-integer
## Ref: https://stackoverflow.com/questions/29271593/bash-check-for-amount-of-memory-installed-on-a-system-as-sanity-check
## Ref: https://stackoverflow.com/questions/50177216/how-to-grant-all-privileges-to-root-user-in-mysql-8-0
## Ref: https://stackoverflow.com/questions/28118296/bash-script-is-super-slow
## Ref: https://stackoverflow.com/questions/15445361/speeding-up-bash-scripts
## Ref: https://unix.stackexchange.com/questions/67057/bash-script-optimization-of-processing-speed
## Ref: https://unix.stackexchange.com/questions/313256/why-write-an-entire-bash-script-in-functions
## Ref: http://nginx.org/en/linux_packages.html
## Ref: https://www.digitalocean.com/community/questions/nginx-stable-or-mainline-for-production-server
## Ref: https://precisionsec.com/changing-the-wordpress-site-url-using-the-mysql-command-line/
## Ref: https://magc.co/box/notes/change-wp-urls-mysql/
## Ref: https://wordpress.stackexchange.com/questions/281814/wordpress-multisite-redirecting-to-wp-signup-php
## Ref: https://wordpress.stackexchange.com/questions/165507/site-redirecting-to-wp-signup-php
## Ref: https://askubuntu.com/questions/86849/how-to-unzip-a-zip-file-from-the-terminal
## Ref: https://www.computerhope.com/unix/rsync.htm
## Ref: https://lowendbox.com/blog/wordpress-cheap-vps-lowendscript/

## SS_EOF